s1 = 'Строка в ориднарных кавычках'
s2 = "Строка в двойных кавычках"

s3 = str("Строка")
s4: str = "Строка"
s5: str = str("Строка")

s6 = "\" - Двойная кавычка"
s7 = "\' - Одинарная кавычка"
s8 = "First Line\nSecond Line"
s9 = r"С:\Необработанная строка"
s10 = """\
    Первая строка
    Вторая строка
"""

# Конкатонация строк
s11 = 'Py' 'thon'  # Python | Конкатонация без оператора работает только с литералами
s12 = 'Py' + 'thon'  # Python | Конкатонация с оператором + работает с переменными и литералами
s13 = 'Py' * 2  # PyPy

# Работа с символами строк
txt = "Я люблю изучать новое"
i = txt[0]  # Я
e = txt[-1]  # е
love = txt[2:7]  # люблю
i_love = txt[0:7]  # я люблю
new = txt[-5:]  # новое

# Ключевые слова
ln = len(txt)  # 21 | Возврощает длинну строки
x = "ма" in "Маша"  # True | Возврощает True если строка имеет выбранный суфикс

# Строковые методы
txt0 = "мам пап".title()    # Мам Пап | Возврощает копию строки, в которой первые символы будет заглавным
txt1 = "маша".capitalize()  # Маша | Возврощает копию строки, в которой первый символ будет заглавным, а другие нет
txt2 = "МАша".lower()       # маша | Возврощает копию строки, в которой все символы будут в нижнем регистре
txt3 = "Маша".upper()       # МАША | Возврощает копию строки, в которой все символы будут в верхнем регистре
txt4 = "МАша".casefold()    # маша | Удаляет все регистры

txt5 = "маша".center(len("маша")+2, '_')  # _маша_ | Возврощает копию строки с центрированием и форматированием

txt6 = "маша".count("a")         # 2 | Возврощает кол-во повторений выбранного символа
txt61 = "маша".count("a", 2, 4)  # 1 | Возврощает кол-во повторений выбранного символа в диапазоне от 2 до 4

txt7 = "маша".encode("utf-8")    # b'\xd0\x9c\xd0\xb0\xd0\xa8\xd0\xb0' | Возврощает закодированную строку в виде байтов
txt8 = "маша".endswith("ша")    # True | Возврощает True если строка заканчивается на выбранный суффикс, иначе False
txt9 = "маша".startswith("ма")  # True | Возврощает True если строка начинается на выбранный суффикс, иначе False

txt10 = "маша".find("аш", 1, 4)    # 1 | Возврощает наименьший индекс выбранного суфикса в выбранном диапазоне, иначе -1
txt101 = "маша".index("аш", 1, 4)  # 1 | То же самое, что find, но при ошибке возврощает ValueError

txt11 = "м{}".format("аша")  # маша | Форматирует строку

txt12 = "12F".isalnum()   # True | Возврощает True, если все символы буквенно-цифровые и есть хотя бы одна буква
txt13 = "12F".isalpha()   # True | Возврощает True, если все символы буквенные и есть хотя бы одна буква
txt14 = "12".isdigit()    # True | Возврощает True если символ состоит из цифр, иначе false
txt15 = "12".isnumeric()  # True | Возврощает True если символ состоит из цифр, иначе false
txt16 = "12".isdecimal()  # True | Возврощает True если символ состоит из цифр, иначе false
txt17 = "q1".isascii()    # True | Возврощает True если все символы присущи кодировки ASCI, иначе false
txt18 = "qw".islower()    # True | Возврощает True если все символы находятся в нижнем регистре, иначе false
txt19 = "qw".isupper()    # True | Возврощает True если все символы находятся в верхнем регистре, иначе false
txt20 = "Qw".istitle()    # True | Возврощает True если строка начинается с большой буквы, иначе false
txt21 = " ".isspace()     # True | Возврощает True если в строке есть только пробельные символы

txt22 = "маша".removeprefix("ма")  # ша | Возврощает копию строки с удалённым префиксом
txt23 = "маша".removesuffix("аш")  # ма | Возврощает копию строки с удалённым суффиксом
txt24 = "Я Егор".replace("Я", "Он")  # Он Егор | Взврощает копию строки с заменённым значением

txt25 = " ".join(['Привет,', 'Мир!'])      # Привет, Мир! | Соединяет строки
txt26 = str.partition("привет,пока", ",")  # ('привет', ',', 'пока') | Разделяет строку по выбранному суффиксу
txt27 = "1,2,3".split(',')              # ['1', '2', '3'] | Разделяет строку по выбранному суффиксу и возврощает массив
txt28 = "1,2,3".split(',', maxsplit=1)  # ['1', '2,3'] | Разделяет строку по выбранному суффиксу и возврощает массив

# Стиливое форматирование строки
print("%aу %d лет" % ("Егор", 18))
print('%(language)s has %(number)03d quote types' % {'language': "Python", "number": 2})

"""
Спецификаторы
d, i, u - десятичное число
o - восьмеричное число
x - шестнадцатиричное число
e - експоненциальный формат с плавающей точкой
f - десятичный дробное число
с - символ
s - строка
a - ASCII символы
% - процент символа
"""