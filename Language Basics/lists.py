# Списки, они же динамические массивы
# Списки могут содержать элементы разных типов, но
# обычно все элементы имеют один и тот же тип

squares = [1, 4, 9, 16, 25]

# Изминение
squares[0:4] = 24  # [1, 4, 9, 16, 24]

# Деструктуризация
a, b, c, d, e = squares

# Индексирование
s1 = squares[0]     # 1
s2 = squares[0:]    # [1, 4, 9, 16, 25]
s3 = squares[:]     # [1, 4, 9, 16, 25]
s4 = squares[1:-1]  # [4, 9, 16]

# Конкатонация
s5 = squares + [36, 49]  # [1, 4, 9, 16, 25, 36, 49]
s6 = squares * 2         # [1, 4, 9, 16, 25, 1, 4, 9, 16, 25]

# Методы
lst = [1, 2, 3, 4, 5]

len(lst)       # 5 | Длинна массива

lst.index(3, 0, -1)  # 2 | Находит индекс первого подходящего элемента, иначе ValueError
lst.append(6)        # [1, 2, 3, 4, 5, 6] | Добовление в конец списка
lst.extend([7, 8])   # [1, 2, 3, 4, 5, 6, 7, 8] | Соединяет списка
lst.insert(7, 7.5)   # Вставляет  элемент 7.5 по индексу 7 и сдвигает другие элементы вправо
lst.remove(7.5)      # Удаляет первый элемент имеющий значение 7.5, иначе ValueError
lst.pop()            # Возвращает и удаляет последний элемент списка
lst.sort()           # Сортирует список на основе функции sort(def func()), иначе стандартная сортировка
lst.reverse()        # Разварачивает список
lst.copy()           # Возврощает копию списка
lst.clear()          # Отчищает список

# Генерация списка
squares1 = list(map(lambda x: x**2, range(10)))  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# list comprehension
squares2 = [x**2 for x in range(10)]             # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

vec = [-4, -2, 0, 2, 4]
squares3 = [x*2 for x in vec if x >= 0]            # [0, 4, 8]
